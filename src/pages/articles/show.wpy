<template>
    <view class="container">
        <view class="page-body" style="margin-bottom: 100px">
            <view class="page__bd">
                <view class="article">
                    <view class="zan-font-16 zan-font-bold">{{ article.title }}</view>
                    <view class="media-box__info">
                        <view class="media-box__info__meta" wx:if="{{ article.is_original }}">原创</view>
                        <view class="media-box__info__meta">{{ article.user.name }}</view>
                        <view class="media-box__info__meta media-box__info__meta_extra">{{ article.published_time }}</view>
                    </view>
                    <view class="media-box__body">
                        <import src="/markdown/entry.wxml"/>
                        <template is="entry" data="{{...article.content}}"/>
                    </view>
                </view>
                <view style="padding: 0 10px">
                    <view class="resp-head">全部回复（{{ article.comments_count }}）</view>
                    <repeat for="{{ comments }}" key="" index="index" item="comment">
                        <view class="article">
                            <view class="article-info">
                                <view class="article-author">
                                    <navigator url="/pages/user/me?name={{ comment.reply_user.name }}" hover-class="none">
                                        <view>
                                            <image class="article-author-icon" src="{{ image_url + comment.reply_user.avatar }}"/>
                                        </view>
                                    </navigator>
                                    <view class="article-author-info">
                                        <view>{{  comment.reply_user.name }}</view>
                                        <view>{{ comment.created_at.created_diff }}</view>
                                    </view>
                                </view>
                                <view class="article-author-position">
                                    <view>{{ index + 1 }}楼</view>
                                </view>
                            </view>
                            <view>
                                <view class="zan-c-red" wx:if="{{ comment.parent_id }}">
                                    @{{ comment.user.name }}
                                </view>
                                <import src="/markdown/entry.wxml"/>
                                <template is="entry" data="{{...comment.content.raw}}"/>

                            </view>
                        </view>
                    </repeat>
                </view>
            </view>
        </view>
        <view class="page-tail">
            <block wx:if="{{ user }}">
                <view class="resp-input-cell">
                    <input class="resp-input" type="text" value="{{ message }}" placeholder="说点什么吧..." bindinput="bindCommentMessageInput"/>
                </view>

                <view class="resp-btn" @tap="submit">回复</view>
            </block>
            <navigator wx:else class="need-login" url="/pages/auth/login">点此处登录之后，即可回复文章😆</navigator>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import api from '@/utils/api'
    import {imageUrl} from "../../utils/image";

    export default class Show extends wepy.page {
        config = {
            navigationBarTitleText: '文章详情'
        }
        data = {
            article : {},
            comments: [],
            image_url : '',
            user : null,
            message: ''
        }
        async submit(e) {
           if (! this.message) {
               return
           }

            try {
                // 请求发布回复接口
                let createResponse = await api.request({
                    url: 'comments',
                    method: 'POST',
                    data: {
                        content: this.message,
                        commentable_id: this.article.id,
                        commentable_type: 'article',
                    },
                    header: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })

                if (createResponse.statusCode === 200) {
                    let comment = createResponse.data.data
                    const Towxml = require('towxml')
                    const towxml = new Towxml();
                    //将文件转换成为towxml支持的json数据
                    comment.content.raw = towxml.toJson(comment.content.raw, 'markdown');

                    this.comments.push(comment)
                    this.message = ''
                    this.$apply()
                }

                // 提示发布成功
                wepy.showToast({
                    title: '评论成功',
                    icon: 'success'
                })
            } catch (err) {
                console.log(err)
                wepy.showModal({
                    title: '提示',
                    content: '服务器错误，请联系管理员'
                })
            }
        }
        // 获取文章数据
        async getArticle(slug){
            try {
                let articleResponse = await api.request({
                    url: 'articles/' + slug,
                    header: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                let article = articleResponse.data.data
                const Towxml = require('towxml')
                const towxml = new Towxml();
                //将文件转换成为towxml支持的json数据
                article.content = towxml.toJson(article.content, 'markdown');

                this.article = article
                if (article.comments_count) {
                    let commentsResponse = await
                    api.request({
                        url: 'commentable/' + article.id + '/wx_comment',
                        header: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    let comments = commentsResponse.data.data

                    for (let i = 0; i < comments.length; i++) {
                        comments[i].content.raw = towxml.toJson(comments[i].content.raw, 'markdown');
                    }
                    this.comments = comments
                }

                this.$apply()
            } catch (err) {
                console.log(err)
                wepy.showModal({
                    title: '提示',
                    content: '服务器错误，请联系管理员'
                })
            }
         }
         methods = {
             bindCommentMessageInput(e) {
                 this.message = e.detail.value
             }
         }
        async onLoad(options) {
            this.getArticle(options.slug)
            this.image_url = imageUrl
            // 获取当前用户信息
            this.user = await this.$parent.getCurrentUser()
            this.$apply()
        }
        onShareAppMessage (res) {
            return {
                // 标题是话题标题
                title: this.article.title,
                // 路径为话题详情路径
                path: '/pages/articles/show?slug=' + this.article.slug,
                imageUrl: this.image_url + this.article.share_wx_image,
            }
        }
    }
</script>

<style>
    @import '/markdown/style/main.wxss';
    @import '/markdown/style/light.wxss';
    @import "/style/detail.wxss";
    .article-author-icon{
        width:320px;
        height:240px;
        display:inline-block;
        overflow:hidden;
        vertical-align: text-bottom;
        margin:0;
        border-radius:10%;

    }

</style>
